# Implementation to script: 

true vs false counter to calculate accuracy of the found results vs the users search query.
print(truecount, "/" ,userwordcount, "Words Found")
print(truecount/userwordcount*100,"% Word Accuracy")

# Cleaning up script:

easier way to clean data of special characters? 
userphraseinput = userphraseinput.replace(",", "")
userphraseinput = userphraseinput.replace(".", "")
userphraseinput = userphraseinput.replace(" ", "\n")

are so many if statments needed? Possibly tie into a forloop?
if w1 in userphraseinput:
    f = open("truefalse.txt", 'w')
    f.write("true")
    f.close()
if w2 in userphraseinput:
    f = open("truefalse.txt", 'a')
    f.write(" true")
    f.close()
    
combining lines
w1, w2 = userwordinput.splitlines()[0], userwordinput.splitlines()[1]
w3 = userwordinput.splitlines()[2]
w4 = userwordinput.splitlines()[3]
w5 = userwordinput.splitlines()[4]
w6 = userwordinput.splitlines()[5]
w7 = userwordinput.splitlines()[6]
w8 = userwordinput.splitlines()[7]
w9 = userwordinput.splitlines()[8]

# Overall, this code can be useful for users who want to search for specific words in a large body of text, but it does have some limitations. For example, it does not
account for variations in word forms (such as plural vs. singular), and it does not take into account the context in which the word appears. Therefore, the results of
this script should be interpreted with caution and may require manual inspection to ensure accuracy.
